[
  {
    "objectID": "retro-sdks/sega/mega-drive.html",
    "href": "retro-sdks/sega/mega-drive.html",
    "title": "Mega Drive SDKs",
    "section": "",
    "text": "TODO: talk about SDK for Mega Drive"
  },
  {
    "objectID": "retro-sdks/sega/mega-drive.html#installing-sgdk",
    "href": "retro-sdks/sega/mega-drive.html#installing-sgdk",
    "title": "Mega Drive SDKs",
    "section": "Installing SGDK",
    "text": "Installing SGDK\nWe’ll be deploying the excellent and mature SGDK by Stephane Dallongeville, that allows to develop Mega Drive games in C language.\n\nDeveloping on Linux\nSGDK works natively on Windows, but there are options to make it work on Linux:\n\nUsing Wine\nUsing Marsdev. Here we install the SDK locally instead of using a Docker image for building the project\n\nQuick installation steps: link\nCompile time is long, so let it do its thing\nSet the $MARSDEV environment variable in .bashrc like this: export MARSDEV=/home/$USER/mars\nCreate a softlink within the $MARSDEV path that points to the SGDK created on compile time within the Marsdev repository. This is required for later use in VS Code extensions\n\n\n\nInclude SGDK to Marsdev path\n\ncd $MARSDEV\nln -s /path/to/git/repository/marsdev/sgdk sgdk\n\n\n\n\nCompiling\nWe can use the following alternatives to compile our projects:\n\nLocally, previously compiling SGDK or Marsdev toolchains\nUsing a Docker image (Dockerfile provided in Stephane’s repository). Just follow these instructions to build your own SGDK docker image and use it to compile your code\n\nThis approach also uses Wine within the Docker container to launch SGDK\n\nUsing Doragasu, another Docker image. Again, just use these instructions to build your project\n\nThis approach uses native Linux compiler, much faster\n\n\nSome compile times comparison:\n\n\n\nApproach\nTime\n\n\n\n\nSGDK docker\n13.721s\n\n\nDoragasu docker\n6.952s\n\n\n\n\n\nDebugging\nWhen using Marsdev, the GDC for m64k (m68k-elf-gdb) isn’t compiled by default. Launch the following command from the git repository root path:\n\n\nCompiling m68k GDB\n\n# Install required dependencies\nsudo apt-get install libgmp-dev\n\nmake m68k-gdb\n\nTake note of the binary path as we’ll have to check it when configuring our text editor.\nWe also need an emulator to run the code and to properly attach when debugging. BlastEm is a relatively modern emulator with embedded debugger. Gens is another good option with very intuitive GUI for debugging purposes.\n\nBlastEm - Use nighly builds\n\nDownload the latest nightly build. At the moment of writing this article (2023/05/07), the available stable 0.6.2 version fails due to missing instructions\n\nVerified version: nightly build from 2023/04/03\n\nUncompress the file and add the resulting directory to your $PATH environment variable\n\nMake sure to update it in your .bashrc file"
  },
  {
    "objectID": "retro-sdks/sega/mega-drive.html#text-editors",
    "href": "retro-sdks/sega/mega-drive.html#text-editors",
    "title": "Mega Drive SDKs",
    "section": "Text editors",
    "text": "Text editors\n\nVS Code\nWe’ll be using Genesis Code extension by Zerasul to help us with the programming side of things. This extension is compatible with all previously mentioned compiling options, both Docker images and Marsdev.\nConfiguration:\n\nCheck Doragasu Image if you plan on using Doragasu GitLab image for building purposes\nSet docker as the Toolchain Type if you plan on using Docker images on build stage\nSet the $MARSDEV env variable\n\nCreating a new Mega Drive project is as simple as launching Genesis Code: create project from the Command palette. Then check that the .vscode path has been created and make sure that both launch.json and settings.json point towards the right MARSDEV paths, else VS Code won’t include the SGDK headers to the project.\n\nDebug configuration\nIn order to properly debug using BlastEm, check the .vscode/launch.json file and make sure that everything points towards the correct paths:\n\nprogram: should be the ELF program created when compiling with the debug options enabled (Genesis Code: Compile for Debugging in the command palette).\n\nThis file must include the symbols\nWhen compiling with SGDK, the generated file is out/rom.out\n\nsourcefileMap: it must point to the SGDK src path, retrieved using the Marsdev make targets\nmiDebuggerPath: don’t touch it. Just make sure you compiled the m68k-elf-gdb as told in previous steps\nmiDebuggerArgs: make sure that the emulator name is correct and that it launches the out/rom.bin file\n\nOnce done, go to the Run and Debug option (CTRL + SHIFT + D), select the Debug with gdb remote profile and click on play. If a breakpoint has been set in your code, the Debug var should start to show some info:\n\n\n\nVS Code debugging a Hello World example\n\n\n\n\n\n\n\n\nTODO: create a VS Codium Docker image that already includes Marsdev installed\n\n\n\n\n\n\n\n\ninclude-code-files.lua\n\n--- include-code-files.lua – filter to include code from source files\n---\n--- Copyright: © 2020 Bruno BEAUFILS\n--- License:   MIT – see LICENSE file for details\n\n--- Dedent a line\nlocal function dedent (line, n)\n  return line:sub(1,n):gsub(\" \",\"\") .. line:sub(n+1)\nend\n\n--- Filter function for code blocks\nlocal function transclude (cb)\n  if cb.attributes.include then\n    local content = \"\"\n    local fh = io.open(cb.attributes.include)\n    if not fh then\n      io.stderr:write(\"Cannot open file \" .. cb.attributes.include .. \" | Skipping includes\\n\")\n    else\n      local number = 1\n      local start = 1\n\n      -- change hyphenated attributes to PascalCase\n      for i,pascal in pairs({\"startLine\", \"endLine\"})\n      do\n         local hyphen = pascal:gsub(\"%u\", \"-%0\"):lower()\n         if cb.attributes[hyphen] then\n            cb.attributes[pascal] = cb.attributes[hyphen]\n            cb.attributes[hyphen] = nil\n         end\n      end\n\n      if cb.attributes.startLine then\n        cb.attributes.startFrom = cb.attributes.startLine\n        start = tonumber(cb.attributes.startLine)\n      end\n      for line in fh:lines (\"L\")\n      do\n        if cb.attributes.dedent then\n          line = dedent(line, cb.attributes.dedent)\n        end\n        if number &gt;= start then\n          if not cb.attributes.endLine or number &lt;= tonumber(cb.attributes.endLine) then\n            content = content .. line\n          end\n        end\n        number = number + 1\n      end \n      fh:close()\n    end     \n    -- remove key-value pair for used keys\n    cb.attributes.include = nil\n    cb.attributes.startLine = nil\n    cb.attributes.endLine = nil\n    cb.attributes.dedent = nil\n    -- return final code block\n    return pandoc.CodeBlock(content, cb.attr)\n  end\nend\n\nreturn {\n  { CodeBlock = transclude }\n}"
  },
  {
    "objectID": "retro-sdks/nintendo/nes.html#installing-sdk",
    "href": "retro-sdks/nintendo/nes.html#installing-sdk",
    "title": "NES SDKs",
    "section": "Installing SDK",
    "text": "Installing SDK"
  },
  {
    "objectID": "retro-sdks/nintendo/nes.html#text-editors",
    "href": "retro-sdks/nintendo/nes.html#text-editors",
    "title": "NES SDKs",
    "section": "Text editors",
    "text": "Text editors"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site:\nRetroDev docs aims to ease the deployment of the required software development tools to start new retro-games’ projects."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RetroDev docs",
    "section": "",
    "text": "Welcome to RetroDev docs. Here you’ll find guides and hints for retro-gaming development."
  }
]